class Solution {
    public int totalNQueens(int n) {
        boolean board[][]= new boolean[n][n];
        return queens(board, 0);

    }
        int queens(boolean [][]board , int row){
            if(row == board.length) return 1;
            int count = 0;
            for(int col = 0 ; col< board.length; col++){
                if(isSafe(board, row, col)){
                    board[row][col] = true;
                  count +=   queens(board , row+1);
                  board[row][col] = false;
                }
          
            }      return count;
        }
        

        boolean isSafe(boolean [][] board, int row, int col){
        for(int i = row-1,j=col;i>=0; i--){
            if(board[i][j]== true){
                return false;
            }
        }
        for(int i = row-1,j=col-1;i>=0 && j>=0;  i-- , j--){
            if(board[i][j]==true){
                return false;
            }
        }
        for(int i = row-1,j=col+1;i>=0 && j<board.length;  i-- , j++){
            if(board[i][j]== true){
                return false;
            }
            
        }
        return true;
    }
       
}

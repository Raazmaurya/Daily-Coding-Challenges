class Solution {
    public List<List<String>> solveNQueens(int n) {
        
        char[][] board = new char[n][n];
        for(int i = 0 ; i<board.length; i++){
            for(int j =0 ; j<board.length; j++){
                board[i][j] = '.';
            }
           
        }
        List<List<String>> ans = new ArrayList<>();
        queen(board, 0 , ans);
        return ans;
    }
    static void queen(char[][] board, int row, List<List<String>> list){
        if(row==board.length){
            list.add(construct(board));
            return;
        }
        for(int col = 0; col<board.length ; col++){
            if(isSafe(board, row, col)){
                board[row][col] = 'Q';
                queen(board, row+1, list);
                board[row][col] = '.';
            }
        }
    }
    static List<String> construct(char[][] board){
        List<String> internal = new ArrayList<>();
        for(int i =0 ; i< board.length; i++){
            String row = new String(board[i]);
            internal.add(row);
        }
        return internal;
    }
    static boolean isSafe(char[][] board, int row, int col){
        for(int i = row-1,j=col;i>=0; i--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        for(int i = row-1,j=col-1;i>=0 && j>=0;  i-- , j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        for(int i = row-1,j=col+1;i>=0 && j<board.length;  i-- , j++){
            if(board[i][j]=='Q'){
                return false;
            }
            
        }
        return true;
    }
       
}
